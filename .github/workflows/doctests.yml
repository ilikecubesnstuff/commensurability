name: doctests

on:
  schedule:
    - cron: '0 0 1 */2 *'  # full doctests first day of every second month
    - cron: '0 0 */2 * 1'  # partial doctests every other monday, kind of
  push:
    paths:
      - 'docs/**'
      - 'examples/**'
  pull_request:
    paths:
      - 'docs/**'
      - 'examples/**'
  workflow_dispatch:
    inputs:
      galpy:
        description: galpy doctests
        type: boolean
        default: true
      gala:
        description: gala doctests
        type: boolean
        default: true
      agama:
        description: agama doctests
        type: boolean
        default: true
      figures:
        description: figure tests (computationally expensive)
        type: boolean
        default: false

jobs:
  mkdocs:
    name: build with mkdocs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: pdm sync
        run: pdm sync -G docs
      - name: mkdocs build
        run: pdm run -v mkdocs build -v

  galpy:
    needs: mkdocs
    if: github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && inputs.galpy)
    strategy:
      matrix:  # matrix for easy edits, but no need to run more than once right now
        os: [ubuntu-latest]
        pyversion: [3.13]
    name: galpy with python ${{ matrix.pyversion }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
        # from here, scripts require "shell: bash -el {0}" with conda-incubator/setup-miniconda@v3
        # see: https://github.com/conda-incubator/setup-miniconda?tab=readme-ov-file#important
      - name: setup
        shell: bash -el {0}
        run: |
          conda activate test
          conda install -c conda-forge gsl galpy pytest sybil
          python -m pip install --upgrade pip
          python -m pip install .
      - name: test docs
        shell: bash -el {0}
        run: >-
          pytest docs
          --ignore=docs/tessellation/implementation_ar_test.py
          --ignore=docs/tessellation/implementation_norm_test.py
          --ignore=docs/tessellation/usage/analysis/rotating_bar_test.py
          --ignore=docs/tessellation/usage/analysis/solar_neighborhood_test.py
      - name: test figures
        if: inputs.figures || (github.event_name == 'schedule' && github.event.schedule == '0 0 1 */2 *')
        shell: bash -el {0}
        run: >-
          pytest
          docs/tessellation/implementation_ar_test.py
          docs/tessellation/implementation_norm_test.py
          docs/tessellation/usage/analysis/rotating_bar_test.py
          docs/tessellation/usage/analysis/solar_neighborhood_test.py
      - name: test examples
        shell: bash -el {0}
        run: |  # interactive mode so mpl figures don't halt the script
          echo "interactive: true" > matplotlibrc
          python examples/using_galpy/rotating_bar.py

  gala:
    needs: mkdocs
    if: >-  # only run for full tests, or on workflow_dispatch
      (github.event_name != 'schedule' && github.event_name != 'workflow_dispatch') ||
      (github.event_name == 'schedule' && github.event.schedule == '0 0 1 */2 *') ||
      (github.event_name == 'workflow_dispatch' && inputs.gala)
    strategy:
      matrix:  # matrix for easy edits, but no need to run more than once right now
        os: [ubuntu-latest]
        pyversion: [3.13]
    name: gala with python ${{ matrix.pyversion }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
        # from here, scripts require "shell: bash -el {0}" with conda-incubator/setup-miniconda@v3
        # see: https://github.com/conda-incubator/setup-miniconda?tab=readme-ov-file#important
      - name: setup
        shell: bash -el {0}
        run: |
          conda activate test
          conda install -c conda-forge gsl gala pytest sybil
          python -m pip install --upgrade pip
          python -m pip install .
      - name: test docs
        shell: bash -el {0}
        run: pytest docs
      # no documentation figures currently generated by gala
      - name: test examples
        shell: bash -el {0}
        run: |  # interactive mode so mpl figures don't halt the script
          echo "interactive: true" > matplotlibrc
          python examples/using_gala/rotating_bar.py

  agama:
    needs: mkdocs
    if: >-  # only run for full tests, or on workflow_dispatch
      (github.event_name != 'schedule' && github.event_name != 'workflow_dispatch') ||
      (github.event_name == 'schedule' && github.event.schedule == '0 0 1 */2 *') ||
      (github.event_name == 'workflow_dispatch' && inputs.agama)
    strategy:
      matrix:  # matrix for easy edits, but no need to run more than once right now
        os: [ubuntu-latest]
        pyversion: [3.13]
    name: agama with python ${{ matrix.pyversion }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
        # from here, scripts require "shell: bash -el {0}" with conda-incubator/setup-miniconda@v3
        # see: https://github.com/conda-incubator/setup-miniconda?tab=readme-ov-file#important
      - name: setup
        shell: bash -el {0}
        run: |
          conda activate test
          conda install -c conda-forge numpy six pytest sybil
          python -m pip install --upgrade pip
          git clone https://github.com/GalacticDynamics-Oxford/Agama.git ../Agama
          cd ../Agama
          python setup.py install --yes
          cd ../commensurability
          python -m pip install .
      - name: test docs
        shell: bash -el {0}
        run: >-
          pytest docs
          --ignore=docs/tessellation/implementation_ar_test.py
          --ignore=docs/tessellation/implementation_norm_test.py
          --ignore=docs/tessellation/usage/analysis/rotating_bar_test.py
          --ignore=docs/tessellation/usage/analysis/solar_neighborhood_test.py
      - name: test figures
        if: inputs.figures || (github.event_name == 'schedule' && github.event.schedule == '0 0 1 */2 *')
        shell: bash -el {0}
        run: >-
          pytest
          docs/tessellation/implementation_ar_test.py
          docs/tessellation/implementation_norm_test.py
          docs/tessellation/usage/analysis/rotating_bar_test.py
          docs/tessellation/usage/analysis/solar_neighborhood_test.py
      - name: test examples
        shell: bash -el {0}
        run: |  # interactive mode so mpl figures don't halt the script
          echo "interactive: true" > matplotlibrc
          python examples/using_agama/rotating_bar.py
